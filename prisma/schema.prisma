datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    Student
    Librarian
    Admin
}

model User {
    id            Int             @id @default(autoincrement())
    email         String          @unique
    password      String
    tokens        Token[]
    role          Role?
    Verifications Verifications[]
    Profile       Profile?
}

model Profile {
    userId           Int    @id
    user             User   @relation(references: [id], fields: [userId])
    name             String
    rollNo           String
    branch           String
    yearOfGraduation String
}

model BookWithEdition {
    id              Int         @id
    bookId          Int
    editionId       Int
    title           String?
    description     String?
    author          Author[]
    publisher       Publisher[]
    price           Int
    genre           String
    pages           Int?
    totalCount      Int
    availableCount  Int
    token           Token[]
    isbn13          String?
    isbn10          String?
    noOfEditions    Int
    cover           Cover[]
    publish_date    String?
    translated_from String?
    languages       String?
    translation_of  String?
    latest_revision Int?
    revision        Int?
}

model Book {
    id             Int         @id
    bookId         Int
    title          String?
    description    String?
    author         Author[]
    publisher      Publisher[]
    price          Int
    genre          String
    pages          Int?
    totalCount     Int
    availableCount Int
    cover          Cover[]
}

model Publisher {
    id              Int               @id @default(autoincrement())
    name            String            @unique
    book            Book[]
    bookWithEdition BookWithEdition[]
}

model Author {
    id              Int               @id @default(autoincrement())
    name            String            @unique
    book            Book[]
    bookWithEdition BookWithEdition[]
}

model Cover {
    id                Int             @id @default(autoincrement())
    coverId           Int
    bookWithEditionId Int
    bookWithEdition   BookWithEdition @relation(fields: [bookWithEditionId], references: [id])
    bookId            Int?
    book              Book?           @relation(fields: [bookId], references: [id])
}

model Token {
    id         Int               @id @default(autoincrement())
    books      BookWithEdition[]
    borrowerId Int
    borrower   User              @relation(fields: [borrowerId], references: [id])
    createdAt  DateTime          @default(now())
    duration   Int
    collected  Boolean           @default(false)
    returned   Boolean           @default(false)
    dues       Int               @default(0)
    dueDate    DateTime
}

model Session {
    id    Int    @id @default(autoincrement())
    email String
}

model Verifications {
    id            Int      @id @default(autoincrement())
    userId        Int
    User          User     @relation(fields: [userId], references: [id])
    currentRole   Role?
    roleRequested Role
    createdAt     DateTime @default(now())
}
